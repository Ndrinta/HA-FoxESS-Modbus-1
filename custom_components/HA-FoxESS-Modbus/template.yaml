---
#-----------------------------------------------------------------------------
# START: template.yaml include file for HA-FoxESS-Modbus
#-----------------------------------------------------------------------------

# these templates perform maths operations on sensor values to create derrived values

- sensor:
    # battery capacity
    # ---------- add your battery capacity ----------
    - name: "Battery Capacity"
      unique_id: foxess_inv1_battery_capacity
      unit_of_measurement: "kWh"
      state: >
        {% set capacity = 4 * 2.56 * 0.9 %}
        {% set remaining = states('sensor.bms_kwh_remaining') | float(default=-1) %}
        {% set soc = states('sensor.battery_soc') | float(default=-1) %}
        {% set remaining = -1 if soc < 100.0 else remaining %}
        {% set current = states('sensor.battery_capacity') | float(default=-1) %}
        {% set result = current if remaining < 0.0 else remaining %}
        {% set result = capacity if result < 0.0 else result %}
        {{ result | round(2) }}
    # calculate the energy in battery
    - name: "Battery Energy"
      unique_id: foxess_inv1_battery_energy
      unit_of_measurement: "kWh"
      state: >
        {% set capacity = states('sensor.battery_capacity') | float(default=0) %}
        {% set soc = states('sensor.battery_soc') | float(default=0) %}
        {% set energy = states('sensor.bms_kwh_remaining') | float(default=-1) %}
        {% set energy = capacity * soc / 100 if energy < 0.0 else energy %}
        {{ energy | round(2) }}
    # calculate the number of hours that the battery can power the current load for
    # 5% loss allowance for inverter converting battery DC  to house AC power
    - name: "Battery Duration"
      unique_id: foxess_inv1_battery_duration
      icon: "mdi:timer-play"
      unit_of_measurement: "h"
      state: >
        {% set capacity = states('sensor.battery_capacity') | float(default=0) %}
        {% set min_soc = states('sensor.min_soc_on_grid') | float(default=10) %}
        {% set reserve = capacity * min_soc / 100 %}
        {% set energy = states('sensor.battery_energy') | float(default=0) %}
        {% set power = states('sensor.load_power') | float(default=0) * 1.05 %}
        {% set power = 0.1 if power < 0.1 else power %}
        {% set hours = ((energy - reserve) / power) | int  %}
        {% set hours = 24 if hours > 24 else hours  %}
        {% set hours = 0 if hours < 0 else hours  %}
        {{ hours }}
    # calculate cell imbalance as % using the difference between min and max cell voltage
    - name: "Battery Cell Imbalance"
      unique_id: foxess_inv1_battery_cell_imbalance
      unit_of_measurement: "%"
      state: >
        {% set cell_high = states('sensor.bms_cell_mv_high') | float(default=-1) %}
        {% set cell_low = states('sensor.bms_cell_mv_low') | float(default=-1) %}
        {% set imbalance = ((cell_high - cell_low) | abs) / (cell_high + cell_low) * 200 %}
        {% set imbalance = 'Unavailable' if cell_high <= -1 or cell_low <= -1 else imbalance | round(2) %}
        {{ imbalance }}
    # calculate average cell temperature using the min and max cell temperature
    - name: "Battery Cell Temperature"
      unique_id: foxess_inv1_battery_cell_temperature
      unit_of_measurement: "Â°C"
      state: >
        {% set temp_high = states('sensor.bms_cell_temp_high') | float(default=-50) %}
        {% set temp_low = states('sensor.bms_cell_temp_low') | float(default=-50) %}
        {% set temp = (temp_high + temp_low) / 2 %}
        {% set temp = 'Unavailable' if temp_high <= -50 or temp_low <= -50 else temp | round(1) %}
        {{ temp }}
    # calculate the amount of energy stored in the battery today
    - name: "Battery Backfill"
      unique_id: foxess_inv1_battery_backfill
      device_class: "energy"
      unit_of_measurement: "kWh"
      state: >
        {{( states('sensor.charge_energy_today')|float(default=0)
          - states('sensor.discharge_energy_today')|float(default=0)
          ) | round(3) }}

    # calculate power flowing into inverter from solar, battery and grid
    - name: "Inverter Power In"
      device_class: "power"
      unique_id: foxess_inv1_inverter_power_in
      unit_of_measurement: "kW"
      state: >
        {% set pv_power_in = states('sensor.pv_power_now') | float(default=0) %}
        {% set rpower = states('sensor.RPower') | float(default=0) %}
        {% set rpower_in = 0.0 if rpower > 0.0 else rpower * -1.0 %}
        {% set spower = states('sensor.SPower') | float(default=0) %}
        {% set spower_in = 0.0 if spower > 0.0 else spower * -1.0 %}
        {% set tpower = states('sensor.TPower') | float(default=0) %}
        {% set tpower_in = 0.0 if tpower > 0.0 else tpower * -1.0 %}
        {% set bat_power = states('sensor.InvBatPower') | float(default=0) %}
        {% set bat_power_in = 0.0 if bat_power < 0.0 else bat_power %}
        {% set power_in = pv_power_in + rpower_in + spower_in + tpower_in + bat_power_in %}
        {{ power_in | round(3) }}
    # calculate power flowing out of inverter
    - name: "Inverter Power Out"
      device_class: "power"
      unique_id: foxess_inv1_inverter_power_out
      unit_of_measurement: "kW"
      state: >
        {% set rpower = states('sensor.RPower') | float(default=0) %}
        {% set rpower_out = 0 if rpower < 0.0 else rpower %}
        {% set spower = states('sensor.SPower') | float(default=0) %}
        {% set spower_out = 0 if spower < 0.0 else spower %}
        {% set tpower = states('sensor.TPower') | float(default=0) %}
        {% set tpower_out = 0 if tpower < 0.0 else tpower %}
        {% set eps_rpower_out = states('sensor.EPS_RPower') | float(default=0) %}
        {% set eps_spower_out = states('sensor.EPS_SPower') | float(default=0) %}
        {% set eps_tpower_out = states('sensor.EPS_TPower') | float(default=0) %}
        {% set bat_power = states('sensor.InvBatPower') | float(default=0) %}
        {% set bat_power_out = 0 if bat_power > 0.0 else bat_power * -1.0 %}
        {% set power_out = rpower_out + spower_out + tpower_out + eps_rpower_out + eps_spower_out + eps_tpower_out + bat_power_out %}
        {{ power_out | round(3) }}
    # calculate sytem losses. Clip range between -1kw and +1kw to remove sampling errors and spikes
    - name: "System Losses"
      device_class: "power"
      unique_id: foxess_inv1_system_losses
      unit_of_measurement: "kW"
      state: >
        {% set power_in = states('sensor.inverter_power_in') | float(default=0) %}
        {% set power_out = states('sensor.inverter_power_out') | float(default=0) %}
        {% set losses = power_in - power_out %}
        {% set losses = -1.0 if losses < -1.0 else losses %}
        {% set losses = 1.0 if losses > 1.0 else losses %}
        {{ losses | round(3) }}
    # calculate inverter efficiency % using the difference between power in and power out
    - name: "Inverter Efficiency"
      unique_id: foxess_inv1_inverter_efficiency
      unit_of_measurement: "%"
      state: >
        {% set power_out = states('sensor.inverter_power_out') | float(default=0) %}
        {% set power_in = states('sensor.inverter_power_in') | float(default=0) %}
        {% set efficiency = power_out / power_in * 100 if power_in > 0.0 else 100 %}
        {% set efficiency = 100 if efficiency > 100 else efficiency %}
        {{ efficiency | round(1) }}
    # calculate inverter efficiency % using the difference between energy in and energy out
    - name: "Inverter Efficiency Daily"
      unique_id: foxess_inv1_inverter_efficiency_daily
      unit_of_measurement: "%"
      state: >
        {% set energy_out = states('sensor.inverter_energy_out_daily') | float(default=0) %}
        {% set energy_in = states('sensor.inverter_energy_in_daily') | float(default=0) %}
        {% set efficiency = energy_out / energy_in * 100 if energy_in > 0.0 else 100 %}
        {% set efficiency = 100 if efficiency > 100 else efficiency %}
        {{ efficiency | round(1) }}

    # calculate grid dependency - difference between load power consumed and solar power generated
    - name: "Grid Dependency Today"
      device_class: "energy"
      unique_id: foxess_inv1_grid_dependency_today
      unit_of_measurement: "kWh"
      state: >
        {% set load_today = states('sensor.load_energy_today') | float(default=-1) %}
        {% set load_daily = states('sensor.load_daily') | float(default=0) %}
        {% set load = load_today if load_today >= 0.0 else load_daily %}
        {% set pv_today = states('sensor.pv_energy_today') | float(default=-1) %}
        {% set pv_daily = states('sensor.pv_energy_daily') | float(default=0) %}
        {% set pv = pv_today if pv_today >= 0.0 else pv_daily %}
        {% set dependency = load - pv %}
        {{ dependency | round(2) }}
    # calculate grid balance - difference between grid power imported and exported
    - name: "Grid Balance Today"
      device_class: "energy"
      unique_id: foxess_inv1_grid_balance_today
      unit_of_measurement: "kWh"
      state: >
        {% set grid_today = states('sensor.grid_consumption_energy_today') | float(default=-1) %}
        {% set grid_daily = states('sensor.grid_daily') | float(default=0) %}
        {% set grid = grid_today if grid_today >= 0.0 else grid_daily %}
        {% set feedin_today = states('sensor.feed_in_energy_today') | float(default=-1) %}
        {% set feedin_daily = states('sensor.feedin_daily') | float(default=0) %}
        {% set feedin = feedin_today if feedin_today >= 0.0 else feedin_daily %}
        {% set balance = grid - feedin %}
        {{ balance | round(2) }}

    # separate battery power into charge and discharge based on sign
    - name: "Battery Discharge"
      device_class: "power"
      unique_id: foxess_inv1_battery_discharge
      unit_of_measurement: "kW"
      state: >
        {% if (states('sensor.InvBatPower') | float(default=0) ) > 0 %}
        {{ states('sensor.InvBatPower') | float(default=0) * 1 }}
        {% else %}
        0 
        {% endif %}
    - name: "Battery Charge"
      device_class: "power"
      unique_id: foxess_inv1_battery_charge
      unit_of_measurement: "kW"
      state: >
        {% if (states('sensor.InvBatPower') | float(default=0) ) < 0 %}
        {{ states('sensor.InvBatPower') | float(default=0) * -1 }}
        {% else %}
        0 
        {% endif %}
    # separate grid import and export power based on sign of grid CT
    - name: "Feed In Power"
      device_class: "power"
      unique_id: foxess_inv1_feed_in_power
      unit_of_measurement: "kW"
      state: >
        {% if (states('sensor.grid_ct') | float(default=0) ) > 0 %}
        {{ states('sensor.grid_ct') | float(default=0) * 1 }}
        {% else %}
        0 
        {% endif %}
    - name: "Grid Consumption"
      device_class: "power"
      unique_id: foxess_inv1_grid_consumption
      unit_of_measurement: "kW"
      state: >
        {% if (states('sensor.grid_ct') | float(default=0) ) < 0 %}
        {{ states('sensor.grid_ct') | float(default=0) * -1 }}
        {% else %}
        0 
        {% endif %}

    # sum power being produced by PV strings
    - name: "PV Power Now"
      device_class: "power"
      unique_id: foxess_inv1_pv_power_now
      unit_of_measurement: "kW"
      state: >
        {{ (states('sensor.pv1_power') | float(default=0) + states('sensor.pv2_power') | float(default=0) ) * 1 }}

    - name: "Work Mode Text"
      unique_id: foxess_inv1_work_mode_text
      icon: "mdi:calendar-clock"
      state: >
        {% set mode = states('sensor.work_mode') | int(default=-1) %}
        {% set result = 'Self Use' if mode == 0 else 'Unavailable' %}
        {% set result = 'Feed In First' if mode == 1 else result %}
        {% set result = 'Backup' if mode == 2 else result %}
        {{ result }}
    - name: "Time Period 1"
      unique_id: foxess_inv1_time_period_1
      icon: "mdi:calendar-clock"
      state: >
        {% set s = states('sensor.time_period_1_start') | int(default=-1) %}
        {% set start_time = ('0' + (s // 256) | string)[-2:] + '.' + ('0' + (s % 256) | string)[-2:] %}
        {% set e = states('sensor.time_period_1_end') | int(default=-1) %}
        {% set end_time = ('0' + (e // 256) | string)[-2:] + '.' + ('0' + (e % 256) | string)[-2:] %}
        {% set enabled = states('binary_sensor.time_period_1_enabled') | string %}
        {% set action = 'Force charge from grid: ' if enabled == 'on' else 'Force charge: ' %}
        {% set result = 'Not configured' if s == 0 and e == 0 else action + start_time + ' - ' + end_time %}
        {% set result = 'Unavailable' if s <= -1 or e <= -1 else result %}
        {{ result }}
    - name: "Time Period 2"
      unique_id: foxess_inv1_time_period_2
      icon: "mdi:calendar-clock"
      state: >
        {% set s = states('sensor.time_period_2_start') | int(default=-1) %}
        {% set start_time = ('0' + (s // 256) | string)[-2:] + '.' + ('0' + (s % 256) | string)[-2:] %}
        {% set e = states('sensor.time_period_2_end') | int(default=-1) %}
        {% set end_time = ('0' + (e // 256) | string)[-2:] + '.' + ('0' + (e % 256) | string)[-2:] %}
        {% set enabled = states('binary_sensor.time_period_2_enabled') | string %}
        {% set action = 'Force charge from grid: ' if enabled == 'on' else 'Force charge: ' %}
        {% set result = 'Not configured' if s == 0 and e == 0 else action + start_time + ' - ' + end_time %}
        {% set result = 'Unavailable' if s <= -1 or e <= -1 else result %}
        {{ result }}

  #-----------------------------------------------------------------------------
  # END: template.yaml include file for HA-FoxESS-Modbus
  #-----------------------------------------------------------------------------
