---
#-----------------------------------------------------------------------------
# START: template.yaml include file for HA-FoxESS-Modbus
#-----------------------------------------------------------------------------

# these templates perform maths operations on sensor values to create derrived values

- sensor:
    # system installation date for calculating ageing
    # ---------- enter your installation date here ------------------
    - name: "Install Date"
      unique_id: foxess_inv1_install_date
      state: >
        {{ '17-01-2023' }}
    # battery capacity
    # ---------- enter your specified battery capacity below ----------
    - name: "Battery Capacity"
      unique_id: foxess_inv1_battery_capacity
      unit_of_measurement: "kWh"
      state: >
        {% set capacity = (6 * 2.56 * 0.9) | round(2) %}
        {% set remaining = states('sensor.bms_kwh_remaining') | float(default=-1) %}
        {% set soc = states('sensor.battery_soc') | float(default=-1) %}
        {% set remaining = -1 if soc < 100.0 else remaining %}
        {% set current = states('sensor.battery_capacity') | float(default=-1) %}
        {% set result = current if remaining < 0.0 else remaining %}
        {% set result = capacity if result < 0.0 else result %}
        {{ result }}
    # calculate the energy in battery
    - name: "Battery Energy"
      unique_id: foxess_inv1_battery_energy
      unit_of_measurement: "kWh"
      state: >
        {% set capacity = states('sensor.battery_capacity') | float(default=-1) %}
        {% set soc = states('sensor.battery_soc') | float(default=-1) %}
        {% set calculated = (capacity * soc / 100) | round(2) if capacity >= 0.0 and soc >= 0.0 else 'Unavailable' %}
        {% set energy = states('sensor.bms_kwh_remaining') | float(default=-1) %}
        {% set energy = calculated if energy < 0.0 else energy %}
        {{ energy }}
    # calculate the number of hours that the battery can power the current load for
    # 5% loss allowance for inverter converting battery DC  to house AC power
    - name: "Battery Duration"
      unique_id: foxess_inv1_battery_duration
      icon: "mdi:timer-play"
      unit_of_measurement: "hours"
      state: >
        {% set capacity = states('sensor.battery_capacity') | float(default=-1) %}
        {% set min_soc = states('sensor.min_soc_on_grid') | float(default=-1) %}
        {% set reserve = capacity * min_soc / 100 if capacity >= 0.0 and min_soc >= 0.0 else -1 %}
        {% set energy = states('sensor.battery_energy') | float(default=-1) %}
        {% set power = states('sensor.load_power_rolling') | float(default=-1) * 1.05 %}
        {% set hours = ((energy - reserve) / power) | int if energy >= 0.0 and reserve >= 0.0 and power > 0.0 else 0  %}
        {% set hours = 24 if hours is number and hours > 24 else hours  %}
        {% set hours = 0 if hours is number and hours < 0 else hours  %}
        {{ hours }}
    # calculate cell imbalance as % using the difference between min and max cell voltage
    - name: "Battery Cell Imbalance"
      unique_id: foxess_inv1_battery_cell_imbalance
      unit_of_measurement: "%"
      state: >
        {% set cell_high = states('sensor.bms_cell_mv_high') | float(default=-1) %}
        {% set cell_low = states('sensor.bms_cell_mv_low') | float(default=-1) %}
        {% set imbalance = ((cell_high - cell_low) | abs) / (cell_high + cell_low) * 200 %}
        {% set imbalance = 'Unavailable' if cell_high <= -1 or cell_low <= -1 else imbalance | round(2) %}
        {{ imbalance }}
    # calculate average cell temperature using the min and max cell temperature
    - name: "Battery Cell Temperature"
      unique_id: foxess_inv1_battery_cell_temperature
      unit_of_measurement: "Â°C"
      state: >
        {% set temp_high = states('sensor.bms_cell_temp_high') | float(default=-50) %}
        {% set temp_low = states('sensor.bms_cell_temp_low') | float(default=-50) %}
        {% set temp = (temp_high + temp_low) / 2 %}
        {% set temp = 'Unavailable' if temp_high <= -50 or temp_low <= -50 else temp | round(1) %}
        {{ temp }}
    # calculate the amount of energy stored in the battery today
    - name: "Battery Backfill"
      unique_id: foxess_inv1_battery_backfill
      device_class: "energy"
      unit_of_measurement: "kWh"
      state: >
        {% set charge = states('sensor.charge_energy_today') | float(default=-1) %}
        {% set discharge = states('sensor.discharge_energy_today') | float(default=-1) %}
        {% set result = (charge - discharge) | round(3) if charge >= 0.0 and discharge >= 0.0 else 'Unavailable' %}
        {{ result }}
    # calculate days since the sytsem was installed
    - name: "Installed Days"
      unique_id: foxess_inv1_installed_days
      unit_of_measurement: "days"
      state: >
        {% set date_install = as_timestamp(strptime(states('sensor.install_date'), '%d-%m-%Y')) %}
        {% set date_now = as_timestamp(now()) %}
        {% set installed_days = (date_now - date_install) | int // 60 // 60 // 24 %}
        {{ installed_days }}
    # calculate years of battery life remaining
    - name: "Battery Life Remaining"
      unique_id: foxess_inv1_battery_life_remaining
      unit_of_measurement: "years"
      state: >
        {% set installed_days = states('sensor.installed_days') | int %}
        {% set cycles_now = states('sensor.bms_cycle_count') | int %}
        {% set years_remaining = installed_days / cycles_now * 6000 / 365 %}
        {{ years_remaining | round(0) }}

    # inverter date and time setting
    - name: "Inverter Datetime"
      unique_id: foxess_inv1_inverter_datetime
      icon: mdi:clock
      state: >
        {% set t = states('sensor.rtc_years') %}
        {% set t = t + '-' + ('0' + states('sensor.rtc_months'))[-2:] %}
        {% set t = t + '-' + ('0' + states('sensor.rtc_days'))[-2:] %}
        {% set t = t + ' ' + ('0' + states('sensor.rtc_hours'))[-2:] %}
        {% set t = t + ':' + ('0' + states('sensor.rtc_minutes'))[-2:] %}
        {% set t = t + ':' + ('0' + states('sensor.rtc_seconds'))[-2:] %}
        {% set dt = strptime(t, '%Y-%m-%d %H:%M:%S') %}
        {{ dt }}
    # inverter time setting
    - name: "Inverter Time"
      unique_id: foxess_inv1_inverter_time
      icon: mdi:clock
      state: >
        {% set t = ('0' + states('sensor.rtc_hours'))[-2:] %}
        {% set t = t + ':' + ('0' + states('sensor.rtc_minutes'))[-2:] %}
        {{ t }}
    # calculate power flowing into inverter from solar, battery and grid
    - name: "Inverter Power In"
      device_class: "power"
      unique_id: foxess_inv1_inverter_power_in
      unit_of_measurement: "kW"
      state: >
        {% set pv_power_in = states('sensor.pv_power_now') | float(default=0) %}
        {% set rpower = states('sensor.RPower') | float(default=0) %}
        {% set rpower_in = 0.0 if rpower > 0.0 else rpower * -1.0 %}
        {% set spower = states('sensor.SPower') | float(default=0) %}
        {% set spower_in = 0.0 if spower > 0.0 else spower * -1.0 %}
        {% set tpower = states('sensor.TPower') | float(default=0) %}
        {% set tpower_in = 0.0 if tpower > 0.0 else tpower * -1.0 %}
        {% set bat_power = states('sensor.InvBatPower') | float(default=0) %}
        {% set bat_power_in = 0.0 if bat_power < 0.0 else bat_power %}
        {% set power_in = pv_power_in + rpower_in + spower_in + tpower_in + bat_power_in %}
        {{ power_in | round(3) }}
    # calculate power flowing out of inverter
    - name: "Inverter Power Out"
      device_class: "power"
      unique_id: foxess_inv1_inverter_power_out
      unit_of_measurement: "kW"
      state: >
        {% set rpower = states('sensor.RPower') | float(default=0) %}
        {% set rpower_out = 0 if rpower < 0.0 else rpower %}
        {% set spower = states('sensor.SPower') | float(default=0) %}
        {% set spower_out = 0 if spower < 0.0 else spower %}
        {% set tpower = states('sensor.TPower') | float(default=0) %}
        {% set tpower_out = 0 if tpower < 0.0 else tpower %}
        {% set eps_rpower_out = states('sensor.EPS_RPower') | float(default=0) %}
        {% set eps_spower_out = states('sensor.EPS_SPower') | float(default=0) %}
        {% set eps_tpower_out = states('sensor.EPS_TPower') | float(default=0) %}
        {% set bat_power = states('sensor.InvBatPower') | float(default=0) %}
        {% set bat_power_out = 0 if bat_power > 0.0 else bat_power * -1.0 %}
        {% set power_out = rpower_out + spower_out + tpower_out + eps_rpower_out + eps_spower_out + eps_tpower_out + bat_power_out %}
        {{ power_out | round(3) }}
    # calculate sytem losses. Clip range between -1kw and +1kw to remove sampling errors and spikes
    - name: "System Losses"
      device_class: "power"
      unique_id: foxess_inv1_system_losses
      unit_of_measurement: "kW"
      state: >
        {% set power_in = states('sensor.inverter_power_in') | float(default=0) %}
        {% set power_out = states('sensor.inverter_power_out') | float(default=0) %}
        {% set losses = (power_in - power_out) | round(3) %}
        {{ losses }}
    # calculate inverter efficiency % using the difference between power in and power out
    - name: "Inverter Efficiency"
      unique_id: foxess_inv1_inverter_efficiency
      unit_of_measurement: "%"
      state: >
        {% set power_out = states('sensor.inverter_power_out') | float(default=0) %}
        {% set power_in = states('sensor.inverter_power_in') | float(default=0) %}
        {% set efficiency = power_out / power_in * 100 if power_in > 0.0 else 100 %}
        {% set efficiency = 100 if efficiency > 100 else efficiency %}
        {{ efficiency | round(1) }}
    # calculate inverter efficiency % using the difference between energy in and energy out
    - name: "Inverter Efficiency Daily"
      unique_id: foxess_inv1_inverter_efficiency_daily
      unit_of_measurement: "%"
      state: >
        {% set energy_out = states('sensor.inverter_energy_out_daily') | float(default=0) %}
        {% set energy_in = states('sensor.inverter_energy_in_daily') | float(default=0) %}
        {% set efficiency = energy_out / energy_in * 100 if energy_in > 0.0 else 100 %}
        {% set efficiency = 100 if efficiency > 100 else efficiency %}
        {{ efficiency | round(1) }}

    # calculate grid dependency - difference between load power consumed and solar power generated
    - name: "Grid Dependency Today"
      device_class: "energy"
      unique_id: foxess_inv1_grid_dependency_today
      unit_of_measurement: "kWh"
      state: >
        {% set load = states('sensor.load_daily') | float(default=-1) %}
        {% set pv = states('sensor.pv_energy_daily') | float(default=-1) %}
        {% set dependency = (load - pv) | round(2) if load >= 0.0 or pv >= 0.0 else 'Unavailable' %}
        {{ dependency }}
    # calculate grid balance - difference between grid power imported and exported
    - name: "Grid Balance Today"
      device_class: "energy"
      unique_id: foxess_inv1_grid_balance_today
      unit_of_measurement: "kWh"
      state: >
        {% set grid = states('sensor.grid_daily') | float(default=-1) %}
        {% set feedin = states('sensor.feedin_daily') | float(default=-1) %}
        {% set balance = (grid - feedin) | round(2) if grid >= 0.0 and feedin >= 0.0 else 'Unavailable' %}
        {{ balance }}

    # separate battery power into charge and discharge based on sign
    - name: "Battery Discharge"
      device_class: "power"
      unique_id: foxess_inv1_battery_discharge
      unit_of_measurement: "kW"
      state: >
        {% set result = states('sensor.InvBatPower') | float(default=0) %}
        {% set result = 0.0 if result < 0.0 else result %}
        {{ result }}
    - name: "Battery Charge"
      device_class: "power"
      unique_id: foxess_inv1_battery_charge
      unit_of_measurement: "kW"
      state: >
        {% set result = states('sensor.InvBatPower') | float(default=0) %}
        {% set result = 0.0 if result > 0.0 else result * -1 %}
        {{ result }}
    # separate grid import and export power based on sign of grid CT
    - name: "Feed In Power"
      device_class: "power"
      unique_id: foxess_inv1_feed_in_power
      unit_of_measurement: "kW"
      state: >
        {% set result = states('sensor.grid_ct') | float(default=0) %}
        {% set result = 0.0 if result < 0.0 else result %}
        {{ result }}
    - name: "Grid Consumption"
      device_class: "power"
      unique_id: foxess_inv1_grid_consumption
      unit_of_measurement: "kW"
      state: >
        {% set result = states('sensor.grid_ct') | float(default=0) %}
        {% set result = 0.0 if result > 0.0 else result * -1 %}
        {{ result }}

    # sum power being produced by PV strings
    - name: "PV Power Now"
      device_class: "power"
      unique_id: foxess_inv1_pv_power_now
      unit_of_measurement: "kW"
      state: >
        {% set pv1 = states('sensor.pv1_power') | float(default=0) %}
        {% set pv2 = states('sensor.pv2_power') | float(default=0) %}
        {% set pv = pv1 + pv2 %}
        {% set pv = 0.0 if pv < 0.0 else pv %}
        {{ pv }}
    - name: "Work Mode"
      unique_id: foxess_inv1_work_mode
      icon: "mdi:calendar-clock"
      state: >
        {% set code = states('sensor.work_mode_code') | int(default=-1) %}
        {% set result = 'Self Use' if code == 0 else 'Unavailable' %}
        {% set result = 'Feed In First' if code == 1 else result %}
        {% set result = 'Backup' if code == 2 else result %}
        {{ result }}
    - name: "Grid Safety Setting"
      unique_id: foxess_inv1_grid_safety_setting
      icon: "mdi:transmission-tower"
      state: >
        {% set code = states('sensor.grid_code') | int(default=-1) %}
        {% set result = 'G98_UK' if code == 2 else 'Unavailable' %}
        {% set result = 'G99_UK' if code == 3 else result %}
        {% set result = code if code > 3 else result %}
        {{ result }}
    - name: "PV Config Setting"
      unique_id: foxess_inv1_pv_config_setting
      icon: "mdi:view-parallel"
      state: >
        {% set code = states('sensor.pv_config_code') | int(default=-1) %}
        {% set result = 'Independent' if code == 0 else 'Unavailable' %}
        {% set result = 'Parallel' if code == 1 else result %}
        {% set result = code if code > 1 else result %}
        {{ result }}
    - name: "Meter 1 Setting"
      unique_id: foxess_inv1_meter1_setting
      icon: "mdi:meter-electric"
      state: >
        {% set code = states('sensor.meter_1_code') | int(default=-1) %}
        {% set result = 'Meter' if code == 0 else 'Unavailable' %}
        {% set result = 'CT' if code == 1 else result %}
        {% set result = 'Disabled' if code == 2 else result %}
        {% set result = code if code > 2 else result %}
        {{ result }}
    - name: "Meter 1 Connection"
      unique_id: foxess_inv1_meter1_connection
      icon: "mdi:network"
      state: >
        {% set code = states('sensor.meter_1_connection_code') | int(default=-1) %}
        {% set result = 'Not Connected' if code == 0 else 'Unavailable' %}
        {% set result = 'OK' if code == 1 else result %}
        {% set result = code if code > 1 else result %}
        {{ result }}
    - name: "Meter 2 Setting"
      unique_id: foxess_inv1_meter2_setting
      icon: "mdi:meter-electric"
      state: >
        {% set code = states('sensor.meter_2_code') | int(default=-1) %}
        {% set result = 'Meter' if code == 0 else 'Unavailable' %}
        {% set result = 'CT' if code == 1 else result %}
        {% set result = 'Disabled' if code == 2 else result %}
        {% set result = code if code > 2 else result %}
        {{ result }}
    - name: "Meter 2 Connection"
      unique_id: foxess_inv1_meter2_connection
      icon: "mdi:network"
      state: >
        {% set code = states('sensor.meter_2_connection_code') | int(default=-1) %}
        {% set result = 'Not Connected' if code == 0 else 'Unavailable' %}
        {% set result = 'OK' if code == 1 else result %}
        {% set result = code if code > 1 else result %}
        {{ result }}
    - name: "BMS Connection"
      unique_id: foxess_inv1_bms_connection
      icon: "mdi:network"
      state: >
        {% set code = states('sensor.bms_connection_code') | int(default=-1) %}
        {% set result = 'Initialising' if code == 0 else 'Unavailable' %}
        {% set result = 'OK' if code == 1 else result %}
        {% set result = 'Not Connected' if code == 2 else result %}
        {% set result = code if code > 2 else result %}
        {{ result }}
    - name: "BMS Status"
      unique_id: foxess_inv1_bms_status
      icon: "mdi:list-status"
      state: >
        {% set code = states('sensor.battery_status_code') | int(default=-1) %}
        {% set result = 'Idle' if code == 0 else 'Unavailable' %}
        {% set result = 'Normal' if code == 1 else result %}
        {% set result = 'Offline' if code == 2 else result %}
        {% set result = code if code > 2 else result %}
        {{ result }}
    - name: "EPS Frequency Setting"
      unique_id: foxess_inv1_eps_frequency_setting
      device_class: frequency
      unit_of_measurement: "Hz"
      state: >
        {% set code = states('sensor.eps_frequency_code') | int(default=-1) %}
        {% set result = 60.0 if code == 1 else 50.0 %}
        {{ result }}
    - name: "Inverter State"
      unique_id: foxess_inv1_state
      icon: "mdi:play"
      state: >
        {% set mode = states('sensor.inverter_state_code') | int(default=-1) %}
        {% set result = 'Stopped' if mode == 0 else 'Unavailable' %}
        {% set result = 'Checking' if mode == 1 else result %}
        {% set result = 'On Grid' if mode == 2 else result %}
        {% set result = 'off Grid / EPS' if mode == 3 else result %}
        {% set result = 'Fault (recoverable)' if mode == 4 else result %}
        {% set result = 'Fault (not recoverable)' if mode == 5 else result %}
        {% set result = mode if mode >= 5 else result %}
        {{ result }}
    - name: "Time Period 1"
      unique_id: foxess_inv1_time_period_1
      icon: "mdi:calendar-clock"
      state: >
        {% set s = states('sensor.time_period_1_start') | int(default=-1) %}
        {% set start_time = ('0' + (s // 256) | string)[-2:] + '.' + ('0' + (s % 256) | string)[-2:] %}
        {% set e = states('sensor.time_period_1_end') | int(default=-1) %}
        {% set end_time = ('0' + (e // 256) | string)[-2:] + '.' + ('0' + (e % 256) | string)[-2:] %}
        {% set enabled = states('binary_sensor.time_period_1_enabled') | string %}
        {% set action = 'Force charge from grid: ' if enabled == 'on' else 'Force charge: ' %}
        {% set result = 'Not configured' if s == 0 and e == 0 else action + start_time + ' - ' + end_time %}
        {% set result = 'Unavailable' if s <= -1 or e <= -1 else result %}
        {{ result }}
    - name: "Time Period 2"
      unique_id: foxess_inv1_time_period_2
      icon: "mdi:calendar-clock"
      state: >
        {% set s = states('sensor.time_period_2_start') | int(default=-1) %}
        {% set start_time = ('0' + (s // 256) | string)[-2:] + '.' + ('0' + (s % 256) | string)[-2:] %}
        {% set e = states('sensor.time_period_2_end') | int(default=-1) %}
        {% set end_time = ('0' + (e // 256) | string)[-2:] + '.' + ('0' + (e % 256) | string)[-2:] %}
        {% set enabled = states('binary_sensor.time_period_2_enabled') | string %}
        {% set action = 'Force charge from grid: ' if enabled == 'on' else 'Force charge: ' %}
        {% set result = 'Not configured' if s == 0 and e == 0 else action + start_time + ' - ' + end_time %}
        {% set result = 'Unavailable' if s <= -1 or e <= -1 else result %}
        {{ result }}

  #-----------------------------------------------------------------------------
  # END: template.yaml include file for HA-FoxESS-Modbus
  #-----------------------------------------------------------------------------
