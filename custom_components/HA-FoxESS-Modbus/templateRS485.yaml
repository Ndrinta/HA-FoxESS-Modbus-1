---
#-----------------------------------------------------------------------------
# START: template.yaml include file for HA-FoxESS-Modbus
#-----------------------------------------------------------------------------

# these templates perform maths operations on sensor values to create derrived values

- sensor:
    # calculate cell imbalance as % using the difference between min and max cell voltage
    - name: "battery_cell_imbalance"
      unique_id: foxess_inv1_battery_cell_imbalance
      unit_of_measurement: "%"
      state: >
        {% set cell_high = states('sensor.bms_cell_mv_high') | float(default=0) %}
        {% set cell_low = states('sensor.bms_cell_mv_low') | float(default=0) %}
        {% set imbalance = (cell_high-cell_low) / (cell_high + cell_low) * 200 if cell_low > 0.0 else 0.0 %}
        {% set imbalance = 0.0 if cell_high < cell_low else imbalance %}
        {{ imbalance | round(2) }}
    # calculate average cell temperature using the min and max cell temperature
    - name: "battery_cell_temp"
      unique_id: foxess_inv1_battery_cell_temperature
      unit_of_measurement: "Â°C"
      state: >
        {% set temp_high = states('sensor.bms_cell_temp_high') | float(default=0) %}
        {% set temp_low = states('sensor.bms_cell_temp_low') | float(default=0) %}
        {% set temp = (temp_high + temp_low) / 2 %}
        {{ temp | round(1) }}
    # calculate the number of hours that the battery can power the current load for
    - name: "battery_duration"
      unique_id: foxess_inv1_battery_duration
      icon: "mdi:timer-play"
      unit_of_measurement: "h"
      state: >
        {% set min_soc = 4 * 2.56 * 0.12 %}
        {% set energy = states('sensor.bms_kwh_remaining') | float(default=0) %}
        {% set power = states('sensor.load_power') | float(default=0) %}
        {% set power = 0.1 if power < 0.1 else power %}
        {% set hours = ((energy - min_soc) / power) | int  %}
        {% set hours = 24 if hours > 24 else hours  %}
        {% set hours = 0 if hours < 0 else hours  %}
        {{ hours }}
    # calculate the amount of energy stored in the battery today
    - name: "battery_backfill"
      unique_id: foxess_inv1_battery_backfill
      device_class: "energy"
      unit_of_measurement: "kWh"
      state: >
        {{( states('sensor.battery_charge_today')|float(default=0)
          - states('sensor.battery_discharge_today')|float(default=0)
          ) | round(3) }}

    # calculate power flowing into inverter from solar, battery and grid
    - name: "inverter_power_in"
      device_class: "power"
      unique_id: foxess_inv1_inverter_power_in
      unit_of_measurement: "kW"
      state: >
        {% set pv_power_in = states('sensor.pv_power_now') | float(default=0) %}
        {% set rpower = states('sensor.RPower') | float(default=0) %}
        {% set rpower_in = 0.0 if rpower > 0.0 else rpower * -1.0 %}
        {% set bat_power = states('sensor.InvBatPower') | float(default=0) %}
        {% set bat_power_in = 0.0 if bat_power < 0.0 else bat_power %}
        {% set power_in = pv_power_in + rpower_in + bat_power_in %}
        {{ power_in | round(3) }}
    # calculate power flowing out of inverter
    - name: "inverter_power_out"
      device_class: "power"
      unique_id: foxess_inv1_inverter_power_out
      unit_of_measurement: "kW"
      state: >
        {% set rpower = states('sensor.RPower') | float(default=0) %}
        {% set rpower_out = 0 if rpower < 0.0 else rpower %}
        {% set eps_power_out = states('sensor.EPS_RPower') | float(default=0) %}
        {% set bat_power = states('sensor.InvBatPower') | float(default=0) %}
        {% set bat_power_out = 0 if bat_power > 0.0 else bat_power * -1.0 %}
        {% set power_out = rpower_out + eps_power_out + bat_power_out %}
        {{ power_out | round(3) }}
    # calculate sytem losses. Clip range between -1kw and +1kw to remove sampling errors and spikes
    - name: "System Losses"
      device_class: "power"
      unique_id: foxess_inv1_system_losses
      unit_of_measurement: "kW"
      state: >
        {% set power_in = states('sensor.inverter_power_in') | float(default=0) %}
        {% set power_out = states('sensor.inverter_power_out') | float(default=0) %}
        {% set losses = power_in - power_out %}
        {% set losses = -1.0 if losses < -1.0 else losses %}
        {% set losses = 1.0 if losses > 1.0 else losses %}
        {{ losses | round(3) }}
    # calculate inverter efficiency % using the difference between power in and power out
    - name: "inverter_efficiency"
      unique_id: foxess_inv1_inverter_efficiency
      unit_of_measurement: "%"
      state: >
        {% set power_out = states('sensor.inverter_power_out') | float(default=0) %}
        {% set power_in = states('sensor.inverter_power_in') | float(default=0) %}
        {% set efficiency = power_out / power_in * 100 if power_in > 0.0 else null %}
        {% set efficiency = 100 if efficiency > 100 else efficiency %}
        {{ efficiency | round(1) }}
    # calculate inverter efficiency % using the difference between energy in and energy out
    - name: "inverter_efficiency_daily"
      unique_id: foxess_inv1_inverter_efficiency_daily
      unit_of_measurement: "%"
      state: >
        {% set energy_out = states('sensor.inverter_energy_out_daily') | float(default=0) %}
        {% set energy_in = states('sensor.inverter_energy_in_daily') | float(default=0) %}
        {% set efficiency = energy_out / energy_in * 100 if energy_in > 0.0 else null %}
        {% set efficiency = 100 if efficiency > 100 else efficiency %}
        {{ efficiency | round(1) }}

    # calculate grid balance - difference between grid power imported and exported
    - name: "net_import_daily"
      device_class: "energy"
      unique_id: foxess_inv1_net_import_daily
      unit_of_measurement: "kWh"
      state: >
        {{( states('sensor.grid_consumption_energy_today') | float(default=0)
          - states('sensor.feed_in_energy_today') | float(default=0)
          ) | round(3) }}
    # calculate grid dependency - difference between load power consumed and solar power generated
    - name: "grid_dependency_daily"
      device_class: "energy"
      unique_id: foxess_inv1_grid_dependency_daily
      unit_of_measurement: "kWh"
      state: >
        {{( states('sensor.load_daily') | float(default=0)
          - states('sensor.solar_energy_today') | float(default=0)
          ) | round(3) }}

    # separate battery power into charge and discharge based on sign
    - name: "Battery Discharge"
      device_class: "power"
      unique_id: foxess_inv1_battery_discharge
      unit_of_measurement: "kW"
      state: >
        {% if (states('sensor.InvBatPower') | float(default=0) ) > 0 %}
        {{ states('sensor.InvBatPower') | float(default=0) * 1 }}
        {% else %}
        0 
        {% endif %}
    - name: "Battery Charge"
      device_class: "power"
      unique_id: foxess_inv1_battery_charge
      unit_of_measurement: "kW"
      state: >
        {% if (states('sensor.InvBatPower') | float(default=0) ) < 0 %}
        {{ states('sensor.InvBatPower') | float(default=0) * -1 }}
        {% else %}
        0 
        {% endif %}
    # separate grid import and export power based on sign of grid CT
    - name: "Feed In Power"
      device_class: "power"
      unique_id: foxess_inv1_feed_in_power
      unit_of_measurement: "kW"
      state: >
        {% if (states('sensor.grid_ct') | float(default=0) ) > 0 %}
        {{ states('sensor.grid_ct') | float(default=0) * 1 }}
        {% else %}
        0 
        {% endif %}
    - name: "Grid Consumption"
      device_class: "power"
      unique_id: foxess_inv1_grid_consumption
      unit_of_measurement: "kW"
      state: >
        {% if (states('sensor.grid_ct') | float(default=0) ) < 0 %}
        {{ states('sensor.grid_ct') | float(default=0) * -1 }}
        {% else %}
        0 
        {% endif %}

    # sum power being produced by PV strings
    - name: "PV Power Now"
      device_class: "power"
      unique_id: foxess_inv1_pv_power_now
      unit_of_measurement: "kW"
      state: >
        {{ (states('sensor.pv1_power') | float(default=0) + states('sensor.pv2_power') | float(default=0) ) * 1 }}
    # sum energy produced by PV strings today
    - name: "PV Energy Daily"
      device_class: "energy"
      unique_id: foxess_inv1_pv_energy_daily
      unit_of_measurement: "kWh"
      state: >
        {{ ((states('sensor.pv1_daily') | float(default=0) + states('sensor.pv2_daily') | float(default=0) ) * 1 ) | round(2) }}

    # format time periods for display
    - name: "Time Period 1 - Start Time"
      icon: "mdi:calendar-clock"
      unique_id: foxess_inv1_time_period_1_start_time
      state: >
        {% set raw_time = states('sensor.time_period_1_start') | int %}
        {% set hours = raw_time // 256 %}
        {% set minutes = raw_time - (hours * 256) %}
        {{ strptime(hours | string + ":" + minutes | string, '%H:%M').time() }}
    - name: "Time Period 1 - End Time"
      icon: "mdi:calendar-clock"
      unique_id: foxess_inv1_time_period_1_end_time
      state: >
        {% set raw_time = states('sensor.time_period_1_end') | int %}
        {% set hours = raw_time // 256 %}
        {% set minutes = raw_time - (hours * 256) %}
        {{ strptime(hours | string + ":" + minutes | string, '%H:%M').time() }}
    - name: "Time Period 2 - Start Time"
      icon: "mdi:calendar-clock"
      unique_id: foxess_inv1_time_period_2_start_time
      state: >
        {% set raw_time = states('sensor.time_period_2_start') | int %}
        {% set hours = raw_time // 256 %}
        {% set minutes = raw_time - (hours * 256) %}
        {{ strptime(hours | string + ":" + minutes | string, '%H:%M').time() }}
    - name: "Time Period 2 - End Time"
      icon: "mdi:calendar-clock"
      unique_id: foxess_inv1_time_period_2_end_time
      state: >
        {% set raw_time = states('sensor.time_period_2_end') | int %}
        {% set hours = raw_time // 256 %}
        {% set minutes = raw_time - (hours * 256) %}
        {{ strptime(hours | string + ":" + minutes | string, '%H:%M').time() }}

  #-----------------------------------------------------------------------------
  # END: template.yaml include file for HA-FoxESS-Modbus
  #-----------------------------------------------------------------------------
